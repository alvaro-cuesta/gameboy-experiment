#!/usr/bin/env node

const MIDI_BASE_NOTE_NUM = 69 // A4
const MIDI_BASE_NOTE = 440    // A4
const MIN_GB_NOTE = 36        //
const MAX_MIDI_NOTE = 127

const INDEX_IN_SCALE_TO_NOTES = [
    ['B#',  'C',  'Dbb'],
    ['B##', 'C#', 'Db'],
    ['C##', 'D',  'Ebb'],
    [       'D#', 'Eb', 'Fbb'],
    ['D##', 'E',  'Fb'],
    ['E#',  'F',        'Gbb'],
    ['E##', 'F#', 'Gb'],
    ['F##', 'G',  'Abb'],
    [       'G#', 'Ab'],
    ['G##', 'A',  'Bbb'],
    [       'A#', 'Bb', 'Cbb'],
    ['A##', 'B',  'Cb'],
  ]

// f(midi_note) = 2^(n/12) * 440 Hz
const midiToFreq = (n) => Math.pow(2, (n - MIDI_BASE_NOTE_NUM) / 12) * MIDI_BASE_NOTE

// f = 4194304 / (32 * (2048 - x))  therefore:s
// x = 2048 - 4194304 / 32 / f
const freqToGB = (f) => 2048 - 4194304 / 32 / f

console.log(`
; File autogenerated by generate-midi-table.js
; RGBASM syntax

  IF !DEF(MIDI_TABLE_INC)
MIDI_TABLE_INC SET 1

;; Notes
`)

for (let i = MIN_GB_NOTE; i <= MAX_MIDI_NOTE; i++) {
  const f = midiToFreq(i)
  const notes = INDEX_IN_SCALE_TO_NOTES[i % 12]
  const scale = Math.floor(i / 12)

  console.log(
`; ${notes.join('/')} (${f.toFixed(2)}hz)
MIDI_${i.toString().padEnd(5, ' ')} EQU ${Math.round(freqToGB(f))}
`)

  for (const note of notes) {
    const asciiNote = note
        .replace(/#/g, 's')
        .replace(/b/g, 'b')

    console.log(`NOTE_${(asciiNote + scale).padEnd(5, ' ')} EQU MIDI_${i}`)
  }

  console.log('')
}

console.log(`;; MIDI table data

midiTable: MACRO`)

for (let i = MIN_GB_NOTE; i <= MAX_MIDI_NOTE; i++) {
  console.log(`    DW MIDI_${i}`)
}

console.log(`ENDM

  ENDC ; MIDI_TABLE_INC`)
